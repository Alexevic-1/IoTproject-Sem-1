   
 keyestudio Mini Tank Robot v2.0
 lesson 15
 multiple functions
 httpwww.keyestudio.com


数组，用于储存图案的数据，可以自己算也可以从取摸工具中得到
unsigned char start01[] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01};
unsigned char front[] = {0x00,0x00,0x00,0x00,0x00,0x24,0x12,0x09,0x12,0x24,0x00,0x00,0x00,0x00,0x00,0x00};
unsigned char back[] = {0x00,0x00,0x00,0x00,0x00,0x24,0x48,0x90,0x48,0x24,0x00,0x00,0x00,0x00,0x00,0x00};
unsigned char left[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x28,0x10,0x44,0x28,0x10,0x44,0x28,0x10,0x00};
unsigned char right[] = {0x00,0x10,0x28,0x44,0x10,0x28,0x44,0x10,0x28,0x44,0x00,0x00,0x00,0x00,0x00,0x00};
unsigned char STOP01[] = {0x2E,0x2A,0x3A,0x00,0x02,0x3E,0x02,0x00,0x3E,0x22,0x3E,0x00,0x3E,0x0A,0x0E,0x00};
unsigned char clear[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
#define SCL_Pin  A5  设置时钟引脚为 A5
#define SDA_Pin  A4  设置数据引脚为 A4

#define ML_Ctrl 13  定义左边电机方向控制引脚
#define ML_PWM 11   定义左边电机PWM控制引脚
#define MR_Ctrl 12  定义右边电机方向控制引脚
#define MR_PWM 3   定义右边电机PWM控制引脚

#define Trig 5  ultrasonic trig Pin
#define Echo 4  ultrasonic echo Pin
int distance; 储存超声波测到的距离值，用于跟随功能
int random2; 储存随机数的变量
储存超声波测到的距离值，用于避障功能
int a;  
int a1;
int a2;

#define servoPin 9  servo Pin
int pulsewidth;

#define light_L_Pin A1   定义左光敏传感器引脚
#define light_R_Pin A2   定义右光敏传感器引脚
int left_light;
int right_light;

char bluetooth_val; 用于储存蓝牙接收到的值
int flag;  标志变量，用于进入和退出功能
void setup(){
  Serial.begin(9600);
  pinMode(Trig, OUTPUT);
  pinMode(Echo, INPUT);
  pinMode(ML_Ctrl, OUTPUT);
  pinMode(ML_PWM, OUTPUT);
  pinMode(MR_Ctrl, OUTPUT);
  pinMode(MR_PWM, OUTPUT);
  
  pinMode(servoPin, OUTPUT);
  procedure(90); 设置舵机的角度为90度
 pinMode(SCL_Pin,OUTPUT);
  pinMode(SDA_Pin,OUTPUT);
  matrix_display(clear);    清屏
  matrix_display(start01);  显示开始图案
  pinMode(light_L_Pin, INPUT);
  pinMode(light_R_Pin, INPUT);
}

void loop(){
  if (Serial.available())
  {
    bluetooth_val = Serial.read();
    Serial.println(bluetooth_val);
  }
  switch (bluetooth_val) 
  {
    case 'F'  机器人前进命令
      Car_front();
      matrix_display(front);  显示前进图案
      break;
    case 'B'  机器人后退命令
      Car_back();
      matrix_display(back);  显示后退图案
      break;
    case 'L'  机器人左转进命令
      Car_left();
      matrix_display(left);  显示左转图案
      break;
    case 'R'  机器人右转命令
      Car_right();
      matrix_display(right);  显示右转图案
      break;
    case 'S'  机器人停止命令
      Car_Stop();
      matrix_display(STOP01);  显示停止图案
      break;
   case 'Y'
      matrix_display(start01);  显示开始图案
      follow();
      break;
   case 'U'
      matrix_display(start01);  显示开始图案
      avoid();
      break;
   case 'X'
      matrix_display(start01);  显示开始图案
      light_track();
      break;
  }}
避障功能
void avoid() 
{
  flag = 0;  作为进入避障功能的标志
  while (flag == 0) 
  {
    random2 = random(1, 100);
    a = checkdistance();  把超声波测到前面的距离赋给变量 a
    
    if (a  20) 当测到前方的距离小于20cm时
    {
      Car_Stop();  机器人停止
      delay(200); 延时200ms
      
      procedure(160);  超声波云台左转
      for (int j = 1; j = 10; j = j + (1)) { for语句，让超声波多测几次，数据会更准确
        a1 = checkdistance();  把超声波测到左边的距离赋给变量 a1
      }
      delay(200);
      procedure(20); 超声波云台右转
      for (int k = 1; k = 10; k = k + (1)) {
        a2 = checkdistance(); 把超声波测到右边的距离赋给变量 a2
      }
      if (a1  50  a2  50)  两边的距离有一边是50cm时，机器人往距离大的一边转
      {
        if (a1  a2) 左边的距离大于右边时
        {
          procedure(90);  超声波云台转回正前方
          Car_left();  机器人左转
          delay(500);  左转500ms
          Car_front(); 前进
        } 
        else 
        {
          procedure(90);
          Car_right(); 机器人右转
          delay(500);
          Car_front();  前进
        }
      } 
      else  如果测到的两边的距离都是=50cm的，就随机左转或右转
      {
        if ((long) (random2) % (long) (2) == 0)  随机数为偶数时
        {
          procedure(90);
          Car_left(); 机器人左转
          delay(500);
          Car_front(); 前进
        } 
        else 
        {
          procedure(90);
          Car_right(); 机器人右转
          delay(500);
          Car_front(); 前进
       } } } 
  else  如果测到前方的距离=20cm时，机器人前进
  {
      Car_front(); 前进
  }
   这里再接收蓝牙的值，为了能退出避障功能这个循环
  if (Serial.available())
  {
    bluetooth_val = Serial.read();
    if (bluetooth_val == 'S')  接收到S
    {
      flag = 1;  将flag赋值为1,退出循环
    }}}}
跟随功能
void follow() {
  flag = 0;
  while (flag == 0) {
    distance = checkdistance();  将超声波测到的距离赋给 distance
    if (distance = 20 && distance = 60) 前进的范围
    {
      Car_front();
    }
    else if (distance  10 && distance  20)  停止的范围
    {
      Car_Stop();
    }
    else if (distance = 10)  后退的范围
    {
      Car_back();
    }
    else  其它情况停止
    {
      Car_Stop();
    }
    if (Serial.available())
    {
      bluetooth_val = Serial.read();
      if (bluetooth_val == 'S') 
      {
        flag = 1;  退出循环
      }}}}
控制超声波的函数
float checkdistance() {
  digitalWrite(Trig, LOW);
  delayMicroseconds(2);
  digitalWrite(Trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(Trig, LOW);
  float distance = pulseIn(Echo, HIGH)  58.00;  这里的58.20就是 229.1=58.2
  delay(10);
  return distance;
}
控制舵机的函数
void procedure(int myangle) {
  for (int i = 0; i = 50; i = i + (1)) {
    pulsewidth = myangle  11 + 500;
    digitalWrite(servoPin,HIGH);
    delayMicroseconds(pulsewidth);
    digitalWrite(servoPin,LOW);
    delay((20 - pulsewidth  1000));
  }}

寻光功能
void light_track() {
  flag = 0;
  while (flag == 0) {
    left_light = analogRead(light_L_Pin);
    right_light = analogRead(light_R_Pin);
    if (left_light  650 && right_light  650) 光敏测到的范围值，前进
    {  
      Car_front();
    } 
    else if (left_light  650 && right_light = 650)  光敏测到的范围值，左转
    {
      Car_left();
    } 
    else if (left_light = 650 && right_light  650) 光敏测到的范围值，右转
    {
      Car_right();
    } 
    else  其它情况，停止
    {
      Car_Stop();
    }
    if (Serial.available())
    {
      bluetooth_val = Serial.read();
      if (bluetooth_val == 'S') {
        flag = 1;
     }}}}
点阵的函数
这个函数用于点阵屏显示
void matrix_display(unsigned char matrix_value[])
{
  IIC_start();
  IIC_send(0xc0);  选择地址
  
  for(int i = 0;i  16;i++) 图案数据有16个字节
  {
     IIC_send(matrix_value[i]); 传输图案的数据
  }
  IIC_end();   结束图案数据传输
  IIC_start();
  IIC_send(0x8A);  显示控制，选择脉宽为416
  IIC_end();
}
传输数据开始的条件
void IIC_start()
{
  digitalWrite(SCL_Pin,HIGH);
  delayMicroseconds(3);
  digitalWrite(SDA_Pin,HIGH);
  delayMicroseconds(3);
  digitalWrite(SDA_Pin,LOW);
  delayMicroseconds(3);
}
传输数据
void IIC_send(unsigned char send_data)
{
  for(char i = 0;i  8;i++)  每个字节有8位
  {
      digitalWrite(SCL_Pin,LOW);  将时钟引脚SCL_Pin拉低，才可以改变SDA的信号
      delayMicroseconds(3);
      if(send_data & 0x01)  根据字节的每一位是1还是0来设置SDA_Pin的高低电平
      {
        digitalWrite(SDA_Pin,HIGH);
      }
      else
      {
        digitalWrite(SDA_Pin,LOW);
      }
      delayMicroseconds(3);
      digitalWrite(SCL_Pin,HIGH); 将时钟引脚SCL_Pin拉高，停止数据的传输
      delayMicroseconds(3);
      send_data = send_data  1;  一位一位的检测，所以将数据右移一位
  }}
数据传输结束的标志
void IIC_end()
{
  digitalWrite(SCL_Pin,LOW);
  delayMicroseconds(3);
  digitalWrite(SDA_Pin,LOW);
  delayMicroseconds(3);
  digitalWrite(SCL_Pin,HIGH);
  delayMicroseconds(3);
  digitalWrite(SDA_Pin,HIGH);
  delayMicroseconds(3);
}
电机运转函数
void Car_front()
{
  digitalWrite(MR_Ctrl,LOW);
  analogWrite(MR_PWM,200);
  digitalWrite(ML_Ctrl,LOW);
  analogWrite(ML_PWM,200);
}
void Car_back()
{
  digitalWrite(MR_Ctrl,HIGH);
  analogWrite(MR_PWM,200);
  digitalWrite(ML_Ctrl,HIGH);
  analogWrite(ML_PWM,200);
}
void Car_left()
{
  digitalWrite(MR_Ctrl,LOW);
  analogWrite(MR_PWM,255);
  digitalWrite(ML_Ctrl,HIGH);
  analogWrite(ML_PWM,255);
}
void Car_right()
{
  digitalWrite(MR_Ctrl,HIGH);
  analogWrite(MR_PWM,255);
  digitalWrite(ML_Ctrl,LOW);
  analogWrite(ML_PWM,255);
}
void Car_Stop()
{
  digitalWrite(MR_Ctrl,LOW);
  analogWrite(MR_PWM,0);
  digitalWrite(ML_Ctrl,LOW);
  analogWrite(ML_PWM,0);
}
void Car_T_left()
{
  digitalWrite(MR_Ctrl,LOW);
  analogWrite(MR_PWM,255);
  digitalWrite(ML_Ctrl,LOW);
  analogWrite(ML_PWM,180);
}
void Car_T_right()
{
  digitalWrite(MR_Ctrl,LOW);
  analogWrite(MR_PWM,180);
  digitalWrite(ML_Ctrl,LOW);
  analogWrite(ML_PWM,255);
}
  